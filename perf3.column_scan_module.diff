diff --git a/perf/lua/column_scan_module.c b/perf/lua/column_scan_module.c
index 3f7ec1d76e..6321831b25 100644
--- a/perf/lua/column_scan_module.c
+++ b/perf/lua/column_scan_module.c
@@ -4,6 +4,7 @@
 #include <msgpuck.h>
 #include <stddef.h>
 #include <stdint.h>
+#include <pthread.h>
 
 #include "trivia/config.h"
 #include "trivia/util.h"
@@ -14,287 +15,154 @@
 # define ENABLE_SCANNER 1
 #endif /* ENABLE_MEMCS_ENGINE */
 
-#if defined(ENABLE_READ_VIEW)
-static box_raw_read_view_t *rv;
-#endif /* ENABLE_READ_VIEW */
+#define FAIL_IF(x) do {                                                \
+       if (x) {                                                \
+               fprintf(stderr, "%s failed at %s:%d.\n",        \
+                               #x, __FILE__, __LINE__);        \
+               exit(1);                                        \
+       }                                                       \
+} while (false)
 
-static int
-sum_iterator_lua_func(struct lua_State *L)
-{
-       uint32_t space_id = luaL_checkinteger(L, 1);
-       uint32_t index_id = luaL_checkinteger(L, 2);
-       uint32_t field_no = luaL_checkinteger(L, 3);
-       char key[8];
-       char *key_end = mp_encode_array(key, 0);
-       box_iterator_t *iter = box_index_iterator(space_id, index_id, ITER_ALL,
-                                                 key, key_end);
-       if (iter == NULL)
-               return luaT_error(L);
-       int rc = 0;
-       uint64_t sum = 0;
-       box_tuple_t *tuple;
-       while (true) {
-               rc = box_iterator_next(iter, &tuple);
-               if (rc != 0 || tuple == NULL)
-                       break;
-               const char *data = box_tuple_field(tuple, field_no);
-               if (unlikely(data == NULL || mp_typeof(*data) != MP_UINT)) {
-                       rc = box_error_raise(ER_PROC_LUA, "unexpected result");
-                       break;
-               }
-               sum += mp_decode_uint(&data);
-       }
-       box_iterator_free(iter);
-       if (rc != 0)
-               return luaT_error(L);
-       luaL_pushuint64(L, sum);
-       return 1;
+struct Arg {
+       uint32_t space_id;
+       uint32_t index_id;
+       box_raw_read_view_t *rv;
+       ssize_t size;
+       bool in_tx;
+};
+
+struct timespec ts_diff(const struct timespec *time0,
+                       const struct timespec *time1) {
+  assert(time1);
+  assert(time0);
+  struct timespec diff = {.tv_sec = time1->tv_sec - time0->tv_sec, //
+      .tv_nsec = time1->tv_nsec - time0->tv_nsec};
+  if (diff.tv_nsec < 0) {
+    diff.tv_nsec += 1000000000; // nsec/sec
+    diff.tv_sec--;
+  }
+  return diff;
 }
 
-#if defined(ENABLE_READ_VIEW)
-static int
-sum_iterator_rv_lua_func(struct lua_State *L)
+static void *
+test_read_view(void *arg_)
 {
-       if (rv == NULL)
-               return luaL_error(L, "run init() first");
-       uint32_t space_id = luaL_checkinteger(L, 1);
-       uint32_t index_id = luaL_checkinteger(L, 2);
-       uint32_t field_no = luaL_checkinteger(L, 3);
+       struct Arg *arg = arg_;
+
        box_raw_read_view_space_t *space =
-               box_raw_read_view_space_by_id(rv, space_id);
-       if (space == NULL)
-               return luaT_error(L);
+               box_raw_read_view_space_by_id(arg->rv, arg->space_id);
+       FAIL_IF(space == NULL);
+
        box_raw_read_view_index_t *index =
-               box_raw_read_view_index_by_id(space, index_id);
-       if (index == NULL)
-               return luaT_error(L);
-       char key[8];
-       char *key_end = mp_encode_array(key, 0);
-       box_raw_read_view_iterator_t iter;
-       if (box_raw_read_view_iterator_create(&iter, index, ITER_ALL,
-                                             key, key_end) != 0)
-               return luaT_error(L);
-       int rc = 0;
-       uint64_t sum = 0;
-       while (true) {
-               uint32_t size;
-               const char *data;
-               rc = box_raw_read_view_iterator_next(&iter, &data, &size);
-               if (rc != 0 || data == NULL)
-                       break;
-               if (unlikely(mp_typeof(*data) != MP_ARRAY ||
-                            mp_decode_array(&data) <= field_no)) {
-                       rc = box_error_raise(ER_PROC_LUA, "unexpected result");
-                       break;
-               }
-               for (int i = 0; i < (int)field_no; i++)
-                       mp_next(&data);
-               sum += mp_decode_uint(&data);
-       }
-       box_raw_read_view_iterator_destroy(&iter);
-       if (rc != 0)
-               return luaT_error(L);
-       luaL_pushuint64(L, sum);
-       return 1;
-}
-#endif /* defined(ENABLE_READ_VIEW) */
+               box_raw_read_view_index_by_id(space, arg->index_id);
+       FAIL_IF(index == NULL);
 
-#if defined(ENABLE_ARROW)
-static int
-sum_arrow_lua_func(struct lua_State *L)
-{
-       uint32_t space_id = luaL_checkinteger(L, 1);
-       uint32_t index_id = luaL_checkinteger(L, 2);
-       uint32_t field_no = luaL_checkinteger(L, 3);
-       char key[8];
-       char *key_end = mp_encode_array(key, 0);
-       uint32_t fields[] = {field_no};
-       uint32_t field_count = lengthof(fields);
-       box_arrow_options_t *options = box_arrow_options_new();
-       box_arrow_options_set_batch_row_count(options, 4096);
-       struct ArrowArrayStream stream;
-       int rc = box_index_arrow_stream(space_id, index_id, field_count, fields,
-                                       key, key_end, options, &stream);
-       if (rc != 0) {
-               box_arrow_options_delete(options);
-               return luaT_error(L);
-       }
-       uint64_t sum = 0;
-       struct ArrowArray array;
-       while (true) {
-               rc = stream.get_next(&stream, &array);
-               if (rc != 0 || array.n_children != 1)
-                       break;
-               uint64_t *values = (uint64_t *)array.children[0]->buffers[1];
-               for (int i = 0; i < (int)array.children[0]->length; i++)
-                       sum += values[i];
-               if (array.release != NULL)
-                       array.release(&array);
-       }
-       stream.release(&stream);
-       box_arrow_options_delete(options);
-       if (array.release != NULL)
-               array.release(&array);
-       if (rc != 0)
-               return luaT_error(L);
-       luaL_pushuint64(L, sum);
-       return 1;
-}
-#endif /* defined(ENABLE_ARROW) */
+       char key[16];
+       char *key_begin = mp_encode_array(key, 1);
 
-#if defined(ENABLE_SCANNER)
-static int
-sum_scanner_lua_func(struct lua_State *L)
-{
-       uint32_t space_id = luaL_checkinteger(L, 1);
-       uint32_t index_id = luaL_checkinteger(L, 2);
-       uint32_t field_no = luaL_checkinteger(L, 3);
-       char key[8];
-       char *key_end = mp_encode_array(key, 0);
-       uint32_t fields[] = {field_no};
-       uint32_t field_count = lengthof(fields);
-       box_scanner_t *scanner = box_index_scanner(space_id, index_id,
-                                                  field_count, fields,
-                                                  key, key_end, NULL);
-       if (scanner == NULL)
-               return luaT_error(L);
-       int rc = 0;
-       uint64_t sum = 0;
-       size_t region_svp = box_region_used();
-       while (true) {
-               box_scanner_result_t result;
-               rc = box_scanner_next(scanner, 4096, &result);
-               if (rc != 0 || result.row_count == 0)
-                       break;
-               if (unlikely(result.columns[0].type != SCANNER_COLUMN_UINT64)) {
-                       rc = box_error_raise(ER_PROC_LUA, "unexpected result");
-                       break;
+       struct timespec begin;
+       clock_gettime(CLOCK_MONOTONIC, &begin);
+
+       ssize_t found = 0;
+       for (ssize_t i = 0; found < arg->size; i++) {
+               char *key_end = mp_encode_uint(key_begin, i);
+               box_raw_read_view_iterator_t it;
+               FAIL_IF(box_raw_read_view_iterator_create(&it, index, ITER_EQ,
+                                                         key, key_end) != 0);
+
+               ssize_t returned = 0;
+               while (true) {
+                       uint32_t size;
+                       const char *data;
+                       FAIL_IF(box_raw_read_view_iterator_next(&it, &data,
+                                                               &size) != 0);
+                       if (data == NULL)
+                               break;
+                       returned++;
                }
-               uint64_t *values = result.columns[0].data;
-               for (int i = 0; i < (int)result.row_count; i++)
-                       sum += values[i];
-               box_region_truncate(region_svp);
+               found += returned;
+               box_raw_read_view_iterator_destroy(&it);
        }
-       box_region_truncate(region_svp);
-       box_scanner_free(scanner);
-       if (rc != 0)
-               return luaT_error(L);
-       luaL_pushuint64(L, sum);
-       return 1;
-}
-#endif /* defined(ENABLE_SCANNER) */
 
-#if defined(ENABLE_ARROW) && defined(ENABLE_READ_VIEW)
-static int
-sum_arrow_rv_lua_func(struct lua_State *L)
-{
-       if (rv == NULL)
-               return luaL_error(L, "run init() first");
-       uint32_t space_id = luaL_checkinteger(L, 1);
-       uint32_t index_id = luaL_checkinteger(L, 2);
-       uint32_t field_no = luaL_checkinteger(L, 3);
-       box_raw_read_view_space_t *space =
-               box_raw_read_view_space_by_id(rv, space_id);
-       if (space == NULL)
-               return luaT_error(L);
-       box_raw_read_view_index_t *index =
-               box_raw_read_view_index_by_id(space, index_id);
-       if (index == NULL)
-               return luaT_error(L);
-       char key[8];
-       char *key_end = mp_encode_array(key, 0);
-       uint32_t fields[] = {field_no};
-       uint32_t field_count = lengthof(fields);
-       box_arrow_options_t *options = box_arrow_options_new();
-       box_arrow_options_set_batch_row_count(options, 4096);
-       struct ArrowArrayStream stream;
-       int rc = box_raw_read_view_arrow_stream(index, field_count, fields,
-                                               key, key_end, options, &stream);
-       if (rc != 0) {
-               box_arrow_options_delete(options);
-               return luaT_error(L);
-       }
-       uint64_t sum = 0;
-       struct ArrowArray array;
-       while (true) {
-               rc = stream.get_next(&stream, &array);
-               if (rc != 0 || array.n_children != 1)
-                       break;
-               uint64_t *values = (uint64_t *)array.children[0]->buffers[1];
-               for (int i = 0; i < (int)array.children[0]->length; i++)
-                       sum += values[i];
-               if (array.release != NULL)
-                       array.release(&array);
-       }
-       stream.release(&stream);
-       box_arrow_options_delete(options);
-       if (array.release != NULL)
-               array.release(&array);
-       if (rc != 0)
-               return luaT_error(L);
-       luaL_pushuint64(L, sum);
-       return 1;
+       struct timespec end;
+       clock_gettime(CLOCK_MONOTONIC, &end);
+
+       struct timespec diff = ts_diff(&begin, &end);
+       printf("Read view: %ld.%09ld (%s)\n", diff.tv_sec,
+              diff.tv_nsec, arg->in_tx ? "TX" : "thread");
+
+       return NULL;
 }
-#endif /* defined(ENABLE_ARROW) && defined(ENABLE_READ_VIEW) */
 
-#if defined(ENABLE_SCANNER) && defined(ENABLE_READ_VIEW)
-static int
-sum_scanner_rv_lua_func(struct lua_State *L)
+static void *
+test_raw_index(void *arg_)
 {
-       if (rv == NULL)
-               return luaL_error(L, "run init() first");
-       uint32_t space_id = luaL_checkinteger(L, 1);
-       uint32_t index_id = luaL_checkinteger(L, 2);
-       uint32_t field_no = luaL_checkinteger(L, 3);
-       box_raw_read_view_space_t *space =
-               box_raw_read_view_space_by_id(rv, space_id);
-       if (space == NULL)
-               return luaT_error(L);
-       box_raw_read_view_index_t *index =
-               box_raw_read_view_index_by_id(space, index_id);
-       if (index == NULL)
-               return luaT_error(L);
-       char key[8];
-       char *key_end = mp_encode_array(key, 0);
-       uint32_t fields[] = {field_no};
-       uint32_t field_count = lengthof(fields);
-       box_raw_read_view_scanner_t *scanner = box_raw_read_view_scanner_new(
-               index, field_count, fields, key, key_end, NULL);
-       if (scanner == NULL)
-               return luaT_error(L);
-       int rc = 0;
-       uint64_t sum = 0;
-       size_t region_svp = box_region_used();
-       while (true) {
-               box_scanner_result_t result;
-               rc = box_raw_read_view_scanner_next(scanner, 4096, &result);
-               if (rc != 0 || result.row_count == 0)
-                       break;
-               if (unlikely(result.columns[0].type != SCANNER_COLUMN_UINT64)) {
-                       rc = box_error_raise(ER_PROC_LUA, "unexpected result");
-                       break;
+       struct Arg *arg = arg_;
+
+       uint32_t space_id = arg->space_id;
+       uint32_t index_id = arg->index_id;
+
+       char key[16];
+       char *key_begin = mp_encode_array(key, 1);
+
+       struct timespec begin;
+       clock_gettime(CLOCK_MONOTONIC, &begin);
+
+       ssize_t found = 0;
+       for (ssize_t i = 0; found < arg->size; i++) {
+               char *key_end = mp_encode_uint(key_begin, i);
+               box_iterator_t *it = box_index_iterator(space_id, index_id,
+                                                       ITER_EQ, key, key_end);
+               FAIL_IF(it == NULL);
+
+               ssize_t returned = 0;
+               while (true) {
+                       struct tuple *tuple;
+                       FAIL_IF(box_iterator_next(it, &tuple) != 0);
+                       if (tuple == NULL)
+                               break;
+                       returned++;
                }
-               uint64_t *values = result.columns[0].data;
-               for (int i = 0; i < (int)result.row_count; i++)
-                       sum += values[i];
-               box_region_truncate(region_svp);
+               found += returned;
+               box_iterator_free(it);
        }
-       box_region_truncate(region_svp);
-       box_raw_read_view_scanner_delete(scanner);
-       if (rc != 0)
-               return luaT_error(L);
-       luaL_pushuint64(L, sum);
-       return 1;
+
+       struct timespec end;
+       clock_gettime(CLOCK_MONOTONIC, &end);
+
+       struct timespec diff = ts_diff(&begin, &end);
+       printf("Raw index: %ld.%09ld\n", diff.tv_sec, diff.tv_nsec);
+
+       return NULL;
 }
-#endif /* defined(ENABLE_SCANNER) && defined(ENABLE_READ_VIEW) */
 
 static int
 init_lua_func(struct lua_State *L)
 {
 #if defined(ENABLE_READ_VIEW)
-       rv = box_raw_read_view_new("test");
-       if (rv == NULL)
-               return luaT_error(L);
+       uint32_t space_id = luaL_checkinteger(L, 1);
+       uint32_t index_id = luaL_checkinteger(L, 2);
+
+       struct Arg arg;
+       arg.in_tx = false;
+       arg.space_id = space_id;
+       arg.index_id = index_id;
+       arg.rv = box_raw_read_view_new("test");
+       arg.size = box_index_len(space_id, index_id);
+       FAIL_IF(arg.rv == NULL);
+       FAIL_IF(arg.size == -1);
+
+       pthread_t th;
+       pthread_create(&th, NULL, test_read_view, &arg);
+
+       void *unused;
+       pthread_join(th, &unused);
+       FAIL_IF(unused != NULL);
+
+       arg.in_tx = true;
+       test_read_view(&arg);
+       test_raw_index(&arg);
+
 #endif /* defined(ENABLE_READ_VIEW) */
        (void)L;
        return 0;
@@ -305,22 +173,6 @@ luaopen_column_scan_module(struct lua_State *L)
 {
        static const struct luaL_Reg lib[] = {
                {"init", init_lua_func},
-               {"sum_iterator", sum_iterator_lua_func},
-#if defined(ENABLE_READ_VIEW)
-               {"sum_iterator_rv", sum_iterator_rv_lua_func},
-#endif /* defined(ENABLE_READ_VIEW) */
-#if defined(ENABLE_ARROW)
-               {"sum_arrow", sum_arrow_lua_func},
-#endif /* defined(ENABLE_ARROW) */
-#if defined(ENABLE_SCANNER)
-               {"sum_scanner", sum_scanner_lua_func},
-#endif /* defined(ENABLE_SCANNER) */
-#if defined(ENABLE_ARROW) && defined(ENABLE_READ_VIEW)
-               {"sum_arrow_rv", sum_arrow_rv_lua_func},
-#endif /* defined(ENABLE_ARROW) && defined(ENABLE_READ_VIEW) */
-#if defined(ENABLE_SCANNER) && defined(ENABLE_READ_VIEW)
-               {"sum_scanner_rv", sum_scanner_rv_lua_func},
-#endif /* defined(ENABLE_SCANNER) && defined(ENABLE_READ_VIEW) */
                {NULL, NULL},
        };
        luaL_register(L, "column_scan_module", lib);
